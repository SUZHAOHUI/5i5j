package com.oio.wawj.service.impl;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.persistence.Entity;
import javax.persistence.ManyToOne;

import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import sun.nio.cs.ext.ISO_8859_11;


import com.oio.wawj.bean.Acms;
import com.oio.wawj.bean.Channel;
import com.oio.wawj.bean.User;
import com.oio.wawj.bean.UserAcmsRela;

import com.oio.wawj.dao.NumberDAO;
import com.oio.wawj.dao.UserAcmsRelaDAO;

import com.oio.wawj.service.NumberService;
import com.oio.wawj.util.AboutOperator;
import com.oio.wawj.util.DateTime;
import com.oio.wawj.util.PageListData;




/**
 * 锟斤拷要锟斤拷锟杰ｏ拷Acms锟斤拷氐锟絪ervice锟接口ｏ拷锟斤拷要锟斤拷锟节达拷锟斤拷业锟斤拷锟竭硷拷锟斤拷锟斤拷锟斤拷锟斤拷dao锟斤拷牟锟斤拷锟斤拷锟斤拷锟�
 * @author 
 */
@Entity
public class NumberServiceImpl implements NumberService {
	private final static int CELL_TYPE_SHORT = -1;
	@ManyToOne
	private NumberDAO dao;
	
	private UserAcmsRelaDAO uarDao;
	public UserAcmsRelaDAO getUarDao() {
		return uarDao;
	}

	public void setUarDao(UserAcmsRelaDAO uarDao) {
		this.uarDao = uarDao;
	}

	public NumberDAO getDao() {
		return dao;
	}

	public void setDao(NumberDAO dao) {
		this.dao = dao;
	}

	/**
	 * 锟斤拷锟斤拷锟铰�
	 * @param UserAcmsRela 要锟斤拷锟斤拷锟斤拷锟斤拷
	 */
	public void save(Acms acms) {
		dao.save(acms);
	}
   


	

	/**
	 * 删锟斤拷锟铰�
	 * @param id 要删锟斤拷锟斤拷锟斤拷
	 */
	public void deleteById(Integer id) {
		dao.deleteById(Acms.class, id);
	}

    public List<Acms> findAcmsByNo(String acms){
    	
    	return dao.findByProperty(Acms.class,"acms", acms, 1, "status", "'V'");
    }
	public PageListData findStaffByAcms(Map param, int pageNum, int pageSize) {

		return dao.findStaffByAcms(param, pageNum, pageSize);
	}
	/**
	 * 锟斤拷锟铰硷拷录
	 * @param simc 要锟斤拷锟铰碉拷锟斤拷锟�
	 */
	public void update(Acms acms) {
		dao.saveOrUpdate(acms);
	}
	
	@SuppressWarnings("unchecked")
	public PageListData findNumberList(Map param, int pageNum, int pageSize) {

		return dao.findNumberList(param, pageNum, pageSize);
	}


	/**
	 * 锟斤拷荽锟斤拷锟斤拷锟斤拷锟斤拷锟斤拷锟斤拷询SysRole锟叫憋拷
	 * @param id 
	 * @return SysRole锟叫憋拷锟斤拷锟较�
	 */
	public Acms findById(Integer id) {

		return dao.findById(Acms.class, id);
	}


	

	/**
	 * 
	 * @return 
	 */

	public void importExcel(User user, String path, String excelFilename,File efile) {
		//errorCode = 0;
		List<Object[]> list = parseExcelFile(path, excelFilename ,efile);
		if (list != null) 
		{
			for(int i=0;i<list.size();i++)
			{
				Object[] o = list.get(i); 
			
				  Long userId=(Long) o[0];
				  Integer cId=(Integer) o[1];
				  String acms=(String) o[2];
				  //保存于user_acms_rela,acms	
					 Acms ac=new Acms();
					 ac.setAcms(acms);
					 ac.setOperatorId((int) AboutOperator.getOperatorId());
					 ac.setState("N");
					 ac.setStateDate(DateTime.getCurrentDateTime());
					 ac.setStatus("V");
					 ac.setStatusDate(DateTime.getCurrentDateTime());
					  save(ac);	
					 UserAcmsRela uar=new UserAcmsRela();
					 uar.setOperatorId(String.valueOf(AboutOperator.getOperatorId()));
					 uar.setAcmsId(ac.getAcmsId());
					 uar.setChannelId(cId);
					 if(cId!=null)
					 {
						 uar.setPurpose("C");
					 }else{
						 uar.setPurpose("O"); 
					 }
					 uar.setState("V");
					 uar.setStateDate(DateTime.getCurrentDateTime());
					 uar.setUserId(Integer.valueOf(userId.toString()));
					 uarDao.save(uar);
			}
		}
	}

	
	public List<Object[]> parseExcelFile(String path, String excelFilename,File efile)
	{

	   Workbook book;
	   List<Object[]> acmsList = null;
	   File filenames = new File(path,excelFilename);
	   efile.renameTo(filenames);
		try 
		{
			FileInputStream fileInputStream = new FileInputStream(filenames);
			book = createWorkBook(fileInputStream, excelFilename);
			 if(book != null)
			 {
					//通过索引获取sheet信息
				 Sheet sheet = book.getSheetAt(book.getActiveSheetIndex());  
					//遍历信息  
				int rowCount = sheet.getLastRowNum();
				/* 判断最后一行是否为空行 */
				while(true) {
					Row last_row = sheet.getRow(rowCount); 
					if(null != last_row ){
						if (null != last_row.getCell(1) && !"".equals(last_row.getCell(1).toString().trim()) ) {
							break;
						} else {
							rowCount --;
						}
					}else{
						rowCount --;
					}
				}
				if(rowCount == 0)
				{//若文件中没有数据,则提示"文件中无数据"
					
				}
				else if(rowCount > 0 && rowCount<=10000)
				{
					//用于存储号码信息  
					acmsList = new ArrayList<Object[]>();
					Set<String> excelNumberSet = new HashSet<String>(); 
					List<String> dbNumberList = (List<String>)dao.findAllAcms();
					
					int sameNumberRow = 1;	
					int sameNumberRecord = 0;	
					int countNum = rowCount;
					for (int i = 1; i <= countNum; i++)
					{ 
						int count = 0;
					    Row ros = sheet.getRow(i);  
					    if(ros != null){
					    	if ( null != ros.getCell(1) && !"".equals(ros.getCell(1).toString().trim()) ) {
					    		Acms a = new Acms(); 
					    		ros.getCell(0).setCellType(Cell.CELL_TYPE_STRING);
					    		String number = ros.getCell(0).getStringCellValue();
					    		boolean b = excelNumberSet.add(number);
					    		if(b)
					    		{	
					    			String acms;
					    			Integer cId = null;
                                        //表头
					    				Row row0 = sheet.getRow(0);
					    				// ros.getCell(0).getStringCellValue();//序号
					    				String code = ros.getCell(1).getStringCellValue();//用户
					    				System.out.println(code);
					    				  User user = dao.findUserByCode(code);
					    				  //如果用户不存在，异常处理
					    				  Long userId = user.getUserId();//用户Id
					    				String name = ros.getCell(2).getStringCellValue();//姓名
					    			    ros.getCell(3).setCellType(Cell.CELL_TYPE_STRING);
					    				Cell cell4=ros.getCell(4);
					    				if(cell4!=null){
						    				 String media = ros.getCell(6).getStringCellValue(); //媒体： 渠道
						    				 Channel ch = dao.findChannelByName(media);
						    				 if(ch != null)
						    					 cId = ch.getId().getChannelId(); //渠道Id
						    				 else
						    					 cId = 0;
						    				   acms = ros.getCell(4).getNumericCellValue() + "";
					    				}else{				 
					    					   acms = ros.getCell(3).getStringCellValue();	
					    				}
					    				Object[] obj=new Object[]{userId,cId,acms};
					    				System.out.println(obj.toString());
					    				count++;					   				    				
					    				acmsList.add(obj);  	
					    				
					    		}
					    		else
					    		{	
					    			sameNumberRow++;
					    		}
					    	}else{
					    		rowCount --;
								continue;
					    	}
					    }else{
					    	rowCount --;
							continue;
					    }
					    
					    
					} 
					if(sameNumberRow > 1 && sameNumberRow < rowCount)
					{	//excel锟侥硷拷锟叫达拷锟节诧拷锟斤拷锟截革拷锟斤拷number
						//errorCode = -4;
						acmsList = null;
					}	
					else if(sameNumberRow == rowCount && sameNumberRow !=1)
					{	//excel锟侥硷拷锟叫碉拷number全锟斤拷锟斤拷锟斤拷锟截革拷
						//errorCode = -5;
						acmsList = null;
					}
					else if(sameNumberRecord > 0 && sameNumberRecord < rowCount)
					{	//excel锟侥硷拷锟叫碉拷number锟窖诧拷锟街达拷锟斤拷锟斤拷系统锟斤拷
						//errorCode = -6;
						acmsList = null;
					}
					else if(sameNumberRecord == rowCount)
					{	//excel锟侥硷拷锟叫碉拷number锟斤拷全锟斤拷锟斤拷锟斤拷锟斤拷系统锟斤拷
						//errorCode = -7;
						acmsList = null;
					}
				}
		     } 	
		}catch (Exception e){  
			e.printStackTrace();  
			//errorCode = -9;	
			acmsList = null;
		}
		File target = new File(path, excelFilename);  
	    if(target.exists())
	    	target.delete();  
		
		return acmsList; 
	}
	
	private Object setCellIgorneNull(final Row r, int t, int i) {
		Object o = null;
		
		if (r.getCell(i) != null)
			if (t == CELL_TYPE_SHORT)
			{
				r.getCell(i).setCellType(Cell.CELL_TYPE_STRING);
   	 			String s = r.getCell(i).getStringCellValue();
				try {
					o = Integer.valueOf(s);
				} catch (NumberFormatException e) {
					throw e;
				}
			}
			else
			{
				r.getCell(i).setCellType(t);
				if(t == Cell.CELL_TYPE_STRING)
	   	 			o = r.getCell(i).getStringCellValue();
				else if(t == Cell.CELL_TYPE_NUMERIC)
					o = r.getCell(i).getNumericCellValue();
				else if(t == Cell.CELL_TYPE_FORMULA)
					o = r.getCell(i).getCellFormula();
				else if(t == Cell.CELL_TYPE_ERROR)
					o = r.getCell(i).getErrorCellValue();
				else if(t == Cell.CELL_TYPE_BOOLEAN)
					o = r.getCell(i).getBooleanCellValue();
			}
				
		return o;
	}

	/**
	 * 锟叫讹拷锟侥硷拷锟斤拷锟斤拷 
	 * @param is 锟斤拷锟斤拷锟斤拷 
	 * @param filename 锟斤拷锟斤拷锟斤拷
	 * @return 锟侥硷拷Workbook锟斤拷锟斤拷
	 */
	public Workbook createWorkBook(InputStream is,String filename) throws IOException{ 
	
        if(filename.toLowerCase().endsWith("xls")){    
            return (Workbook) new HSSFWorkbook(is);    
        }else if(filename.toLowerCase().endsWith("xlsx")){  
            return new XSSFWorkbook(is);  
        }else{  
        	//errorCode = -1;	//锟侥硷拷锟斤拷锟酵诧拷锟斤拷希锟揭筹拷锟斤拷锟绞�锟斤拷选锟斤拷excel锟斤拷式锟侥硷拷!"
            return null;  
        }  
	}
	

      


}
