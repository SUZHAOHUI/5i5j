/**
* Copyright (c) DATANG MOBILE COMMUNICATIONS EQUIPMENT CO.,LTD.  1998-2014. 
* All rights reserved.
*/
package com.oio.wawj.dao.impl;

import java.sql.SQLException;
import java.util.List;
import java.util.Map;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import org.hibernate.Hibernate;
import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.SQLQuery;
import org.hibernate.Session;
import org.springframework.orm.hibernate3.HibernateCallback;


import com.oio.wawj.bean.Org;
import com.oio.wawj.bean.RoleFunctions;
import com.oio.wawj.bean.User;
import com.oio.wawj.bean.UserRole;

import com.oio.wawj.dao.UserDAO;
import com.oio.wawj.struts.action.UserAction;
import com.oio.wawj.util.AboutOperator;
import com.oio.wawj.util.PageListData;







/**
 * 
 * @author 
 */
@SuppressWarnings("rawtypes")
public class UserDAOImpl extends BaseDAOImpl<User,Long> implements UserDAO {

	
	/**
	 * 
	 */
	public Integer getFindId(final short id) {
		return  (Integer) getHibernateTemplate().execute(
				new HibernateCallback() {
					public Object doInHibernate(Session s)
							throws HibernateException, SQLException {
//						Long idd = Long.parseLong(id);
						//锟斤拷询锟斤拷锟�
						String hql = "from User a " +
										"where  userId= "+id;		
						System.out.println(hql);
						Query query = s.createQuery(getCountsHql(hql));
//						query.setLong("custId", id);
						int total =  ((Number) query.uniqueResult()).intValue();
						
						return total;	

					}
				});
	}

	/**
	 * 
	 * @param id 
	 * @return 查询全部
	 */
/*	public  String getfindAll(){
		return  ( String) getHibernateTemplate().execute(
				new HibernateCallback() {
					public Object doInHibernate(Session s)
							throws HibernateException, SQLException {
						 JSONObject jsonObject = new JSONObject();
						 JSONArray jsonArray = new JSONArray();  
						String hql = "from  User where 1=1 and type='A' ";
						
						Query query = s.createQuery(hql);
						List list = query.list();
						for(int i = 0; i < list.size(); i++){
							User sf = (User)list.get(i);	
//							 HashMap   hashmap =new  HashMap();
							
							jsonObject.put("id",sf.getUserId());
							jsonObject.put("code",sf.getCode());	
							jsonObject.put("name",sf.getName());	
							jsonObject.put("dataPermission",sf.getDataPermission());	
							jsonObject.put("functionPermission",sf.getFunctionPermission());	
							jsonObject.put("status",sf.getStatus());		
							
							jsonArray.add(jsonObject);
						}
						return jsonArray.toString(); 
					}
				});
	}*/

	
	@SuppressWarnings({ "rawtypes", "unchecked" })
	public PageListData getfindAll(final Map param,final String hql,final String hql1, final int currentPage,final int pageSize){
		try {
			return (PageListData) getHibernateTemplate().execute(
					new HibernateCallback() {
						public Object doInHibernate(Session s) 
							throws HibernateException, SQLException {
							PageListData listdata = null;
														
							
							String chql=" where u.type='A' ";
							
							if (param.get("duty") != null
									&& ((String) param.get("duty")).equals("超级管理员")) {
								     chql = " where u.type='A' ";	
							}else{
								
								if ( param.get("setId") != null && !((String) param.get("setId")).equals("")) {
									 chql = " where u.type='A' and u.set_id ="+(String) param.get("setId");
								}else{
									 chql = " where u.type='A' ";
								}		
							}
							   SQLQuery query = s.createSQLQuery(" select count(*) as total " +hql1+chql);	
							   System.out.println("select count(*) as total" +hql1+chql);
							   System.out.println(hql+hql1+chql);
								query.addScalar("total", Hibernate.LONG);
						
								int total = ((Long) query.uniqueResult()).intValue();
							query = getSession().createSQLQuery(hql+hql1+chql) ;
							query.addScalar("userId",Hibernate.LONG)
							     .addScalar("name", Hibernate.STRING)
							     .addScalar("code", Hibernate.STRING)
							     .addScalar("status", Hibernate.STRING)
							     .addScalar("dataPermission", Hibernate.SHORT)
							     .addScalar("functionPermission", Hibernate.SHORT)
							     .addScalar("password", Hibernate.STRING)
							     .addScalar("setId", Hibernate.STRING)
							     .addScalar("orgId", Hibernate.LONG)
							     .addScalar("orgName", Hibernate.STRING);

							if (0 != pageSize) {
								query.setFirstResult(
										(currentPage == 0 ? 0 : currentPage - 1) * pageSize).setMaxResults(pageSize);
							}
							List data = query.list();
							listdata = new PageListData(total, pageSize, currentPage, data);
							try{
								listdata = new PageListData(total, pageSize, currentPage, data);
							}catch(Exception e){
								e.printStackTrace();
							}
							return listdata;
						}
					});
					
		} catch (RuntimeException re) {
			logger.error(re.toString());
			throw re;
		}
		
	}
	
	
	
	
	/**
	 * 
	 */
	@Override
	public String getfindUserAll(final Short id) {
		
		return  (String) getHibernateTemplate().execute(
				new HibernateCallback() {
					public Object doInHibernate(Session s)
							throws HibernateException, SQLException {
					
						String hql = "from UserRole where 1=1 and roleId=:id";
	
						Query query = s.createQuery(hql);
						short idd=id;
						query.setShort("id", idd);
						List list = query.list();
						return list.get(0);
					}
				});
	}
	


	public User checkLogin(User user) {
		String hql="from User u where u.code=? and u.password=?";
		System.out.println(user.getCode()+"--------code1");
		Query q=getSession().createQuery(hql);
		q.setString(0,user.getCode());
		q.setString(1, user.getPassword());
		return q.list()!=null&&q.list().size()>0?(User)q.list().get(0):null;
	}

	
	public String getChildOrgList(Long orgId) {
		String setId=AboutOperator.getUser().getSetId();
		 String sql1=" select getChildList("+orgId+","+setId+") as childStr  ";
			 SQLQuery query0 =getSession().createSQLQuery(sql1);
			 query0.addScalar("childStr", Hibernate.STRING);
			 String childStr=  query0.uniqueResult().toString();
			
		return childStr;
	}
	@Override
	public void deleteUserById(short id) {
		
	}

	@Override
	public Object getObjectById(String id) {
		return null;
	}

	@SuppressWarnings("unchecked")
	@Override
	public User getUserIdByRoleId(final Short id) {
		
		return  (User) getHibernateTemplate().execute(
				new HibernateCallback() {
					public Object doInHibernate(Session s)
							throws HibernateException, SQLException {
					
						String hql = "from User where 1=1 and userId=:id";
	
						Query query = s.createQuery(hql);
						short idd=id;
						query.setShort("id", idd);
						List list = query.list();
						return list.get(0);
					}
				});
	}
	
	
	
	@SuppressWarnings({ "rawtypes", "unchecked" })
	public PageListData getList(final String hql,final String hql1,final Map param, final int currentPage,final int pageSize){
		try {
			return (PageListData) getHibernateTemplate().execute(
					new HibernateCallback() {
						public Object doInHibernate(Session s) 
							throws HibernateException, SQLException {
							PageListData listdata = null;

							String chql = "where 1=1 and type='A' ";

							 if (param.get("name") != null
								&& !((String) param.get("name")).equals("")) {
								 chql += " and name = '"
											+ (String) param.get("name") + "' ";
					          }
							  
							 if (param.get("code") != null
										&& !((String) param.get("code")).equals("")) {
									chql += " and code = '"
											+ (String) param.get("code") + "'" ;
							  }
							 if (param.get("address") != null
									 && !((String) param.get("address")).equals("")) {
								 chql += " and address = '"
										 + (String) param.get("address") + "'" ;
							 }


							    
							    SQLQuery query = s.createSQLQuery("select count(*) as total  " +hql1+chql);	
							    System.out.println("select count(*) as total from " +hql1+chql);
							    query.addScalar("total", Hibernate.LONG);
						
								int total = ((Long) query.uniqueResult()).intValue();
								
								 System.out.println(total);
								 query =  getSession().createSQLQuery(hql+hql1+chql)
							    		.addScalar("userId", Hibernate.LONG) 
							    		.addScalar("orgId", Hibernate.SHORT) 
							    		.addScalar("orgName", Hibernate.STRING) 
							    		.addScalar("name", Hibernate.STRING) 
							    		.addScalar("code", Hibernate.STRING) 
							    		.addScalar("sex", Hibernate.STRING) 
							    		.addScalar("email", Hibernate.STRING) 
							    		.addScalar("tel", Hibernate.STRING) 
							    		.addScalar("status", Hibernate.STRING) 
							            .addScalar("statusDate",Hibernate.TIMESTAMP)
							            .addScalar("address",Hibernate.STRING);
							    System.out.println(hql+hql1+chql);
							if (0 != pageSize) {
								query.setFirstResult(
										(currentPage == 0 ? 0 : currentPage - 1) * pageSize).setMaxResults(pageSize);
							}
							List data = query.list();
						    listdata = new PageListData(total, pageSize, currentPage, data);
							try{
							listdata = new PageListData(total, pageSize, currentPage, data);
							}catch(Exception e){
								e.printStackTrace();
							}
							return listdata;
						}
					});
					
		} catch (RuntimeException re) {
			logger.error(re.toString());
			throw re;
		}
		
	}
	
	public List<UserRole> findByUserId(Long userId) {
		// TODO Auto-generated method stub
		String hql = "from UserRole s where s.id.userId=?";
		Query q = getSession().createQuery(hql);
		q.setLong(0, userId);

		return q.list();
	}
	

}