<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xmlns:jsp="http://java.sun.com/xml/ns/javaee/jsp" xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" version="2.5">
  <session-config>
    <session-timeout>0</session-timeout>
  </session-config>
  <context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>/WEB-INF/classes/applicationContext.xml</param-value>
  </context-param>
  <listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>
  <listener>
    <listener-class>
			org.springframework.web.context.request.RequestContextListener
	</listener-class>
  </listener>
  <listener>
  <listener-class>
			org.springframework.web.util.IntrospectorCleanupListener
  </listener-class>
  </listener>
  <filter>
    <filter-name>struts2</filter-name>
    <filter-class>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter</filter-class>
  </filter>
  <filter>
    <filter-name>encodingFilter</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <init-param>
      <param-name>encoding</param-name>
      <param-value>UTF-8</param-value>
    </init-param>
  </filter>
  <filter>
    <filter-name>hibernateFilter</filter-name>
    <filter-class>com.oio.wawj.util.OpenSessionInViewFilter</filter-class>
  </filter>
  <filter-mapping>
    <filter-name>hibernateFilter</filter-name>
    <url-pattern>*.action</url-pattern>
  </filter-mapping>
  <filter-mapping>
    <filter-name>struts2</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>
  <filter-mapping>
    <filter-name>encodingFilter</filter-name>
    <url-pattern>*.action</url-pattern>
  </filter-mapping>
  <filter-mapping>
    <filter-name>encodingFilter</filter-name>
    <url-pattern>*.jsp</url-pattern>
  </filter-mapping>
    <listener> 
         <listener-class>org.jasig.cas.client.session.SingleSignOutHttpSessionListener</listener-class> 
     </listener> 
<!--     该过滤器用于实现单点登出功能，可选配置。 -->
     <filter> 
         <filter-name>cas-sso-logout-filter</filter-name> 
        <filter-class>org.jasig.cas.client.session.SingleSignOutFilter</filter-class> 
    </filter> 
     <filter-mapping> 
         <filter-name>cas-sso-logout-filter</filter-name> 
         <url-pattern>*.html</url-pattern> 
     </filter-mapping> 
<!--     该过滤器负责用户的认证工作，必须启用它，也可集成AuthenticationFilter，写入例外页面 -->
     <filter> 
        <filter-name>cas-authentication-filter</filter-name> 
         <filter-class>org.jasig.cas.client.authentication.AuthenticationFilter</filter-class> 
    		<init-param> 
            <param-name>casServerLoginUrl</param-name> 
             <param-value>http://sso.bacic5i5j.com</param-value> 
<!--             这里的server是服务端的IP -->
         </init-param> 
         <init-param> 
             <param-name>serverName</param-name> 
             <param-value>http://192.168.3.238:8080</param-value> 
<!-- 			这里的server是客户端的IP -->
          </init-param> 
     </filter> 
    <filter-mapping> 
         <filter-name>cas-authentication-filter</filter-name> 
         <url-pattern>/*</url-pattern> 
     </filter-mapping> 
<!--     该过滤器负责对Ticket的校验工作，必须启用它 -->
	    <filter>
	        <filter-name>cas-validation-filter</filter-name>
	        <filter-class>org.jasig.cas.client.validation.Cas20ProxyReceivingTicketValidationFilter</filter-class>
	   <init-param>
	            <param-name>casServerUrlPrefix</param-name>
	            <param-value>http://sso.bacic5i5j.com</param-value>
<!--             这里的server是服务端的IP -->
         </init-param> 
         <init-param> 
             <param-name>serverName</param-name> 
             <param-value> http://192.168.3.238:8080</param-value> 
<!-- 			这里的server是客户端的IP -->
        </init-param> 
     </filter> 
    <filter-mapping> 
         <filter-name>cas-validation-filter</filter-name> 
         <url-pattern>/*</url-pattern> 
      </filter-mapping> 
<!--     该过滤器负责实现HttpServletRequest请求的包裹，可选配置。 -->
          <filter> 
        <filter-name>cas-request-wrapper-filter</filter-name> 
        <filter-class>org.jasig.cas.client.util.HttpServletRequestWrapperFilter</filter-class> 
     </filter> 
     <filter-mapping> 
        <filter-name>cas-request-wrapper-filter</filter-name> 
         <url-pattern>/*</url-pattern> 
    </filter-mapping> 
<!-- 	该过滤器使得开发者可以通过org.jasig.cas.client.util.AssertionHolder来获取用户的登录名。 比如AssertionHolder.getAssertion().getPrincipal().getName()。 -->
     <filter>
        <filter-name>cas-append-session-filter</filter-name>
        <filter-class>com.oio.wawj.filter.AppendSession</filter-class>
<!-- 		自动根据单点登录的结果设置本系统的用户信息 -->
    </filter>
    <filter-mapping>
        <filter-name>cas-append-session-filter</filter-name>
        <url-pattern>*.html</url-pattern>
    </filter-mapping>

  <servlet>
    <servlet-name>dwr</servlet-name>
    <servlet-class>org.directwebremoting.servlet.DwrServlet</servlet-class>
    <init-param>
      <param-name>debug</param-name>
      <param-value>true</param-value>
    </init-param>
    <init-param>
      <param-name>crossDomainSessionSecurity</param-name>
      <param-value>false</param-value>
    </init-param>
  </servlet>
  <servlet-mapping>
    <servlet-name>dwr</servlet-name>
    <url-pattern>/dwr/*</url-pattern>
  </servlet-mapping>
  <welcome-file-list>
    <welcome-file>index.html</welcome-file>
  </welcome-file-list>
  <error-page>
    <error-code>404</error-code>
    <location>/index.html</location>
  </error-page>
  <error-page>
    <error-code>500</error-code>
    <location>/500.htm</location>
  </error-page>
  <jsp-config>
    <taglib>
      <taglib-uri>http://rant/functions</taglib-uri>
      <taglib-location>/WEB-INF/rantfn.tld</taglib-location>
    </taglib>
  </jsp-config>
  <listener>
    <listener-class>com.oio.wawj.listener.TimerListener</listener-class>
  </listener>
</web-app>